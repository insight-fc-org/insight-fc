name: ci
on:
  push:
    branches: [ main ]
  pull_request:
jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          package_json_file: package.json
          run_install: false
      - uses: actions/setup-node@v4
        with: { node-version: '20', cache: 'pnpm' }
      - name: Start MongoDB (single-node replica set)
        run: |
          docker run -d --name mongo-rs -p 27017:27017 mongo:7 \
            --replSet rs0 --bind_ip_all

          # Wait for mongod to accept connections
          for i in {1..30}; do
            if docker exec mongo-rs mongosh --quiet --eval "db.runCommand({ ping: 1 })" >/dev/null 2>&1; then
              break
            fi
            sleep 1
          done

          # Initiate single-node replica set
          docker exec mongo-rs mongosh --quiet --eval \
            "rs.initiate({_id:'rs0', members:[{_id:0, host:'localhost:27017'}]})"

          # Wait until PRIMARY
          for i in {1..30}; do
            state=$(docker exec mongo-rs mongosh --quiet --eval "rs.status().members[0].stateStr" || true)
            if [ "$state" = "PRIMARY" ]; then
              echo "Replica set PRIMARY ready"; break
            fi
            sleep 1
          done
      - run: pnpm install
      - run: echo "DATABASE_URL=mongodb://localhost:27017/insightfc?replicaSet=rs0" >> .env
      - run: pnpm prisma:generate
      - run: pnpm build
      - run: pnpm test
      - name: Start API
        run: |
          DATABASE_URL="mongodb://localhost:27017/insightfc?replicaSet=rs0" \
          API_PORT=3000 \
          NODE_ENV=test \
          pnpm --filter api dev & sleep 8
      - name: Wait for API
        run: |
          for i in {1..30}; do
            if curl -sf http://localhost:3000/ > /dev/null; then exit 0; fi
            sleep 1
          done
          echo "API did not become healthy in time" && exit 1
      - name: Run BDD
        run: API_BASE_URL=http://localhost:3000 pnpm bdd